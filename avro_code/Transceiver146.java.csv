Text,Token
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",Comment
"
",Newline
"
",Newline
package,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
ipc,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
io,Identifier
.,Punctuation
Closeable,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
io,Identifier
.,Punctuation
IOException,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
nio,Identifier
.,Punctuation
ByteBuffer,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
List,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
concurrent,Identifier
.,Punctuation
locks,Identifier
.,Punctuation
ReentrantLock,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
Protocol,Identifier
;,Punctuation
"
",Newline
"
",Newline
/** Base transport class used by {@link Requestor}. */,Comment
"
",Newline
public,Keyword
 ,Whitespace
abstract,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
Transceiver,Identifier
 ,Whitespace
implements,Keyword
 ,Whitespace
Closeable,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
ReentrantLock,Identifier
 ,Whitespace
channelLock,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
new,Keyword
 ,Whitespace
ReentrantLock,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
abstract,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
getRemoteName,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
;,Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/**
   * Acquires an exclusive lock on the transceiver's channel.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
lockChannel,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
channelLock,Identifier
.,Punctuation
lock,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/**
   * Releases the lock on the transceiver's channel if held by the calling thread.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
unlockChannel,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
channelLock,Identifier
.,Punctuation
isHeldByCurrentThread,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
channelLock,Identifier
.,Punctuation
unlock,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** Called by {@link Requestor#request(String,Object)} for two-way messages.
   * By default calls {@link #writeBuffers(List)} followed by
   * {@link #readBuffers()}. */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
transceive,Identifier
(,Punctuation
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
request,Identifier
),Punctuation
"
",Newline
    ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
lockChannel,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
try,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
writeBuffers,Identifier
(,Punctuation
request,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
readBuffers,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
 ,Whitespace
finally,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
unlockChannel,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/** 
   * Called by {@link Requestor#request(String,Object,Callback)} for two-way messages using callbacks.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
transceive,Identifier
(,Punctuation
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
request,Identifier
",",Punctuation
 ,Whitespace
Callback,Identifier
<,Operator
List,Identifier
<,Operator
ByteBuffer,Identifier
>>,Operator
 ,Whitespace
callback,Identifier
),Punctuation
"
",Newline
    ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
// The default implementation works synchronously,Comment
"
",Newline
    ,Whitespace
try,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
response,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
transceive,Identifier
(,Punctuation
request,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
callback,Identifier
.,Punctuation
handleResult,Identifier
(,Punctuation
response,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
 ,Whitespace
catch,Keyword
 ,Whitespace
(,Punctuation
IOException,Identifier
 ,Whitespace
e,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
callback,Identifier
.,Punctuation
handleError,Identifier
(,Punctuation
e,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
/** Called by the default definition of {@link #transceive(List)}.*/,Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
abstract,Keyword
 ,Whitespace
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
readBuffers,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** Called by {@link Requestor#request(String,Object)} for one-way messages.*/",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
abstract,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
writeBuffers,Identifier
(,Punctuation
List,Identifier
<,Operator
ByteBuffer,Identifier
>,Operator
 ,Whitespace
buffers,Identifier
),Punctuation
"
",Newline
    ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** True if a handshake has been completed for this connection.  Used to
   * determine whether a handshake need be completed prior to a one-way
   * message.  Requests and responses are always prefixed by handshakes, but
   * one-way messages.  If the first request sent over a connection is one-way,
   * then a handshake-only response is returned.  Subsequent one-way messages
   * over the connection will have no response data sent.  Returns false by
   * default. */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
boolean,Keyword
 ,Whitespace
isConnected,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
 ,Whitespace
return,Keyword
 ,Whitespace
false,Keyword
;,Punctuation
 ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** Called with the remote protocol when a handshake has been completed.
   * After this has been called and while a connection is maintained, {@link
   * #isConnected()} should return true and #getRemote() should return this
   * protocol.  Does nothing by default. */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
setRemote,Identifier
(,Punctuation
Protocol,Identifier
 ,Whitespace
protocol,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** Returns the protocol passed to {@link #setRemote(Protocol)}.  Throws
   * IllegalStateException by default. */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
Protocol,Identifier
 ,Whitespace
getRemote,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
IllegalStateException,Identifier
(,Punctuation
"""Not connected.""",String
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
close,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
},Punctuation
"
",Newline
},Punctuation
"
",Newline
"
",Newline
