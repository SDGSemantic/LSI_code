Text,Token
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied.  See the License for the specific language governing
 * permissions and limitations under the License.
 */",Comment
"
",Newline
"
",Newline
package,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
io,Identifier
.,Punctuation
IOException,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
io,Identifier
.,Punctuation
parsing,Identifier
.,Punctuation
ResolvingGrammarGenerator,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
io,Identifier
.,Punctuation
parsing,Identifier
.,Punctuation
Symbol,Identifier
;,Punctuation
"
",Newline
"
",Newline
"/**
 * A {@link SchemaValidationStrategy} that checks that the {@link Schema} to
 * validate and the existing schema can mutually read each other according to
 * the default Avro schema resolution rules.
 * 
 */",Comment
"
",Newline
class,Keyword
 ,Whitespace
ValidateMutualRead,Identifier
 ,Whitespace
implements,Keyword
 ,Whitespace
SchemaValidationStrategy,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Validate that the schemas provided can mutually read data written by each
   * other according to the default Avro schema resolution rules.
   * 
   * @throws SchemaValidationException if the schemas are not mutually compatible.
   */",Comment
"
",Newline
  ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
validate,Identifier
(,Punctuation
Schema,Identifier
 ,Whitespace
toValidate,Identifier
",",Punctuation
 ,Whitespace
Schema,Identifier
 ,Whitespace
existing,Identifier
),Punctuation
"
",Newline
      ,Whitespace
throws,Keyword
 ,Whitespace
SchemaValidationException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
canRead,Identifier
(,Punctuation
toValidate,Identifier
",",Punctuation
 ,Whitespace
existing,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
canRead,Identifier
(,Punctuation
existing,Identifier
",",Punctuation
 ,Whitespace
toValidate,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Validates that data written with one schema can be read using another,
   * based on the default Avro schema resolution rules.
   * 
   * @param writtenWith
   *          The ""writer's"" schema, representing data to be read.
   * @param readUsing
   *          The ""reader's"" schema, representing how the reader will interpret
   *          data.
   * @throws SchemaValidationException
   *           if the schema <b>readUsing<b/> cannot be used to read data
   *           written with <b>writtenWith<b/>
   */",Comment
"
",Newline
  ,Whitespace
static,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
canRead,Identifier
(,Punctuation
Schema,Identifier
 ,Whitespace
writtenWith,Identifier
",",Punctuation
 ,Whitespace
Schema,Identifier
 ,Whitespace
readUsing,Identifier
),Punctuation
"
",Newline
      ,Whitespace
throws,Keyword
 ,Whitespace
SchemaValidationException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
boolean,Keyword
 ,Whitespace
error,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
try,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
error,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
Symbol,Identifier
.,Punctuation
hasErrors,Identifier
(,Punctuation
new,Keyword
 ,Whitespace
ResolvingGrammarGenerator,Identifier
(,Punctuation
),Punctuation
.,Punctuation
generate,Identifier
(,Punctuation
"
",Newline
          ,Whitespace
writtenWith,Identifier
",",Punctuation
 ,Whitespace
readUsing,Identifier
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
 ,Whitespace
catch,Keyword
 ,Whitespace
(,Punctuation
IOException,Identifier
 ,Whitespace
e,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
SchemaValidationException,Identifier
(,Punctuation
readUsing,Identifier
",",Punctuation
 ,Whitespace
writtenWith,Identifier
",",Punctuation
 ,Whitespace
e,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
error,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
SchemaValidationException,Identifier
(,Punctuation
readUsing,Identifier
",",Punctuation
 ,Whitespace
writtenWith,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
},Punctuation
"
",Newline
