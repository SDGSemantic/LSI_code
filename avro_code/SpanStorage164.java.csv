Text,Token
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",Comment
"
",Newline
"
",Newline
package,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
ipc,Identifier
.,Punctuation
trace,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
List,Identifier
;,Punctuation
"
",Newline
"
",Newline
"/**
 * Responsible for storing spans locally and answering span queries.
 * 
 * Since query for a given set of spans may persist over several RPC
 * calls, they are indexed by a handle.
 *
 */",Comment
"
",Newline
public,Keyword
 ,Whitespace
interface,Keyword
 ,Whitespace
SpanStorage,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
  ,Whitespace
long,Keyword
 ,Whitespace
DEFAULT_MAX_SPANS,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
10000L,Literal
;,Punctuation
"
",Newline
  ,Whitespace
long,Keyword
 ,Whitespace
MILLIS_PER_SECOND,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
1000L,Literal
;,Punctuation
"
",Newline
  ,Whitespace
long,Keyword
 ,Whitespace
NANOS_PER_SECOND,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
1000000000L,Literal
;,Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/**
   * Add a span. 
   * @param s
   */",Comment
"
",Newline
  ,Whitespace
void,Keyword
 ,Whitespace
addSpan,Identifier
(,Punctuation
Span,Identifier
 ,Whitespace
s,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/**
   * Set the maximum number of spans to have in storage at any given time.
   */",Comment
"
",Newline
  ,Whitespace
void,Keyword
 ,Whitespace
setMaxSpans,Identifier
(,Punctuation
long,Keyword
 ,Whitespace
maxSpans,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
"/**
   * Return a list of all spans currently stored. For testing.
   */",Comment
"
",Newline
  ,Whitespace
List,Identifier
<,Operator
Span,Identifier
>,Operator
 ,Whitespace
getAllSpans,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Return a list of all spans that fall within the time given range. 
   * @param start UNIX time (in nanoseconds) as a long
   * @param end UNIX time (in nanoseconds) as a long
   */",Comment
"
",Newline
  ,Whitespace
List,Identifier
<,Operator
Span,Identifier
>,Operator
 ,Whitespace
getSpansInRange,Identifier
(,Punctuation
long,Keyword
 ,Whitespace
start,Identifier
",",Punctuation
 ,Whitespace
long,Keyword
 ,Whitespace
end,Identifier
),Punctuation
;,Punctuation
"
",Newline
},Punctuation
"
",Newline
