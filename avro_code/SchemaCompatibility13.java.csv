Text,Token
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",Comment
"
",Newline
package,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
ArrayList,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
Arrays,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
HashMap,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
HashSet,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
List,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
Map,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
util,Identifier
.,Punctuation
Set,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
Schema,Identifier
.,Punctuation
Field,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
Schema,Identifier
.,Punctuation
Type,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
slf4j,Identifier
.,Punctuation
Logger,Identifier
;,Punctuation
"
",Newline
import,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
slf4j,Identifier
.,Punctuation
LoggerFactory,Identifier
;,Punctuation
"
",Newline
"
",Newline
"/**
 * Evaluate the compatibility between a reader schema and a writer schema.
 * A reader and a writer schema are declared compatible if all datum instances of the writer
 * schema can be successfully decoded using the specified reader schema.
 */",Comment
"
",Newline
public,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
SchemaCompatibility,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Logger,Identifier
 ,Whitespace
LOG,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
LoggerFactory,Identifier
.,Punctuation
getLogger,Identifier
(,Punctuation
SchemaCompatibility,Identifier
.,Punctuation
class,Keyword
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
/** Utility class cannot be instantiated. */,Comment
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
SchemaCompatibility,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
/** Message to annotate reader/writer schema pairs that are compatible. */,Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
READER_WRITER_COMPATIBLE_MESSAGE,Identifier
 ,Whitespace
=,Operator
"
",Newline
      ,Whitespace
"""Reader schema can always successfully decode data written using the writer schema.""",String
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Validates that the provided reader schema can be used to decode avro data written with the
   * provided writer schema.
   *
   * @param reader schema to check.
   * @param writer schema to check.
   * @return a result object identifying any compatibility errors.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
 ,Whitespace
checkReaderWriterCompatibility,Identifier
(,Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
"
",Newline
  ,Whitespace
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
final,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
compatibility,Identifier
 ,Whitespace
=,Operator
"
",Newline
        ,Whitespace
new,Keyword
 ,Whitespace
ReaderWriterCompatiblityChecker,Identifier
(,Punctuation
),Punctuation
"
",Newline
            ,Whitespace
.,Punctuation
getCompatibility,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
final,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
message,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
switch,Keyword
 ,Whitespace
(,Punctuation
compatibility,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
case,Keyword
 ,Whitespace
INCOMPATIBLE,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
message,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
String,Identifier
.,Punctuation
format,Identifier
(,Punctuation
"
",Newline
            ,Whitespace
"""Data encoded using writer schema:%n%s%n""",String
"
",Newline
            ,Whitespace
+,Operator
 ,Whitespace
"""will or may fail to decode using reader schema:%n%s%n""",String
",",Punctuation
"
",Newline
            ,Whitespace
writer,Identifier
.,Punctuation
toString,Identifier
(,Punctuation
true,Keyword
),Punctuation
",",Punctuation
"
",Newline
            ,Whitespace
reader,Identifier
.,Punctuation
toString,Identifier
(,Punctuation
true,Keyword
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
        ,Whitespace
break,Keyword
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
case,Keyword
 ,Whitespace
COMPATIBLE,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
message,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
READER_WRITER_COMPATIBLE_MESSAGE,Identifier
;,Punctuation
"
",Newline
        ,Whitespace
break,Keyword
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
default,Keyword
:,Operator
 ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
AvroRuntimeException,Identifier
(,Punctuation
"""Unknown compatibility: """,String
 ,Whitespace
+,Operator
 ,Whitespace
compatibility,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
return,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
(,Punctuation
"
",Newline
        ,Whitespace
compatibility,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
reader,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
writer,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
message,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
// -----------------------------------------------------------------------------------------------,Comment
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Tests the equality of two Avro named schemas.
   *
   * <p> Matching includes reader name aliases. </p>
   *
   * @param reader Named reader schema.
   * @param writer Named writer schema.
   * @return whether the names of the named schemas match or not.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
boolean,Keyword
 ,Whitespace
schemaNameEquals,Identifier
(,Punctuation
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
final,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
writerFullName,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
writer,Identifier
.,Punctuation
getFullName,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
objectsEqual,Identifier
(,Punctuation
reader,Identifier
.,Punctuation
getFullName,Identifier
(,Punctuation
),Punctuation
",",Punctuation
 ,Whitespace
writerFullName,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
true,Keyword
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
// Apply reader aliases:,Comment
"
",Newline
    ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
reader,Identifier
.,Punctuation
getAliases,Identifier
(,Punctuation
),Punctuation
.,Punctuation
contains,Identifier
(,Punctuation
writerFullName,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
true,Keyword
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
return,Keyword
 ,Whitespace
false,Keyword
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Identifies the writer field that corresponds to the specified reader field.
   *
   * <p> Matching includes reader name aliases. </p>
   *
   * @param writerSchema Schema of the record where to look for the writer field.
   * @param readerField Reader field to identify the corresponding writer field of.
   * @return the writer field, if any does correspond, or None.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
lookupWriterField,Identifier
(,Punctuation
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writerSchema,Identifier
",",Punctuation
 ,Whitespace
final,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
readerField,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
assert,Identifier
 ,Whitespace
(,Punctuation
writerSchema,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
RECORD,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
final,Keyword
 ,Whitespace
List,Identifier
<,Operator
Field,Identifier
>,Operator
 ,Whitespace
writerFields,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
new,Keyword
 ,Whitespace
ArrayList,Identifier
<,Operator
Field,Identifier
>,Operator
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
final,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
direct,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
writerSchema,Identifier
.,Punctuation
getField,Identifier
(,Punctuation
readerField,Identifier
.,Punctuation
name,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
direct,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
writerFields,Identifier
.,Punctuation
add,Identifier
(,Punctuation
direct,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
for,Keyword
 ,Whitespace
(,Punctuation
final,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
readerFieldAliasName,Identifier
 ,Whitespace
:,Operator
 ,Whitespace
readerField,Identifier
.,Punctuation
aliases,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
writerField,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
writerSchema,Identifier
.,Punctuation
getField,Identifier
(,Punctuation
readerFieldAliasName,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
writerField,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
writerFields,Identifier
.,Punctuation
add,Identifier
(,Punctuation
writerField,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
switch,Keyword
 ,Whitespace
(,Punctuation
writerFields,Identifier
.,Punctuation
size,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
case,Keyword
 ,Whitespace
0,Literal
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
null,Keyword
;,Punctuation
"
",Newline
      ,Whitespace
case,Keyword
 ,Whitespace
1,Literal
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
writerFields,Identifier
.,Punctuation
get,Identifier
(,Punctuation
0,Literal
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
default,Keyword
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
AvroRuntimeException,Identifier
(,Punctuation
String,Identifier
.,Punctuation
format,Identifier
(,Punctuation
"
",Newline
            ,Whitespace
"""Reader record field %s matches multiple fields in writer record schema %s""",String
",",Punctuation
"
",Newline
            ,Whitespace
readerField,Identifier
",",Punctuation
 ,Whitespace
writerSchema,Identifier
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Reader/writer schema pair that can be used as a key in a hash map.
   *
   * This reader/writer pair differentiates Schema objects based on their system hash code.
   */",Comment
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
ReaderWriter,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
mReader,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
mWriter,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Initializes a new reader/writer pair.
     *
     * @param reader Reader schema.
     * @param writer Writer schema.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
ReaderWriter,Identifier
(,Punctuation
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
mReader,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
reader,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
mWriter,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
writer,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Returns the reader schema in this pair.
     * @return the reader schema in this pair.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
getReader,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mReader,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Returns the writer schema in this pair.
     * @return the writer schema in this pair.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
getWriter,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mWriter,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
int,Keyword
 ,Whitespace
hashCode,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
System,Identifier
.,Punctuation
identityHashCode,Identifier
(,Punctuation
mReader,Identifier
),Punctuation
 ,Whitespace
^,Operator
 ,Whitespace
System,Identifier
.,Punctuation
identityHashCode,Identifier
(,Punctuation
mWriter,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
boolean,Keyword
 ,Whitespace
equals,Identifier
(,Punctuation
Object,Identifier
 ,Whitespace
obj,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
!,Operator
(,Punctuation
obj,Identifier
 ,Whitespace
instanceof,Keyword
 ,Whitespace
ReaderWriter,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
return,Keyword
 ,Whitespace
false,Keyword
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
ReaderWriter,Identifier
 ,Whitespace
that,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
(,Punctuation
ReaderWriter,Identifier
),Punctuation
 ,Whitespace
obj,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
// Use pointer comparison here:,Comment
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
(,Punctuation
this,Keyword
.,Punctuation
mReader,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
that,Identifier
.,Punctuation
mReader,Identifier
),Punctuation
"
",Newline
          ,Whitespace
&&,Operator
 ,Whitespace
(,Punctuation
this,Keyword
.,Punctuation
mWriter,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
that,Identifier
.,Punctuation
mWriter,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
toString,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
String,Identifier
.,Punctuation
format,Identifier
(,Punctuation
"""ReaderWriter{reader:%s, writer:%s}""",String
",",Punctuation
 ,Whitespace
mReader,Identifier
",",Punctuation
 ,Whitespace
mWriter,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Determines the compatibility of a reader/writer schema pair.
   *
   * <p> Provides memoization to handle recursive schemas. </p>
   */",Comment
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
ReaderWriterCompatiblityChecker,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Map,Identifier
<,Operator
ReaderWriter,Identifier
",",Punctuation
 ,Whitespace
SchemaCompatibilityType,Identifier
>,Operator
 ,Whitespace
mMemoizeMap,Identifier
 ,Whitespace
=,Operator
"
",Newline
        ,Whitespace
new,Keyword
 ,Whitespace
HashMap,Identifier
<,Operator
ReaderWriter,Identifier
",",Punctuation
 ,Whitespace
SchemaCompatibilityType,Identifier
>,Operator
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Reports the compatibility of a reader/writer schema pair.
     *
     * <p> Memoizes the compatibility results. </p>
     *
     * @param reader Reader schema to test.
     * @param writer Writer schema to test.
     * @return the compatibility of the reader/writer schema pair.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
getCompatibility,Identifier
(,Punctuation
"
",Newline
        ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
"
",Newline
    ,Whitespace
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
LOG,Identifier
.,Punctuation
debug,Identifier
(,Punctuation
"""Checking compatibility of reader {} with writer {}""",String
",",Punctuation
 ,Whitespace
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
ReaderWriter,Identifier
 ,Whitespace
pair,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
new,Keyword
 ,Whitespace
ReaderWriter,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
existing,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
mMemoizeMap,Identifier
.,Punctuation
get,Identifier
(,Punctuation
pair,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
existing,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
existing,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
RECURSION_IN_PROGRESS,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
// Break the recursion here.,Comment
"
",Newline
          ,Whitespace
// schemas are compatible unless proven incompatible:,Comment
"
",Newline
          ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
        ,Whitespace
},Punctuation
"
",Newline
        ,Whitespace
return,Keyword
 ,Whitespace
existing,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
"// Mark this reader/writer pair as ""in progress"":",Comment
"
",Newline
      ,Whitespace
mMemoizeMap,Identifier
.,Punctuation
put,Identifier
(,Punctuation
pair,Identifier
",",Punctuation
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
RECURSION_IN_PROGRESS,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
final,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
calculated,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
calculateCompatibility,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
mMemoizeMap,Identifier
.,Punctuation
put,Identifier
(,Punctuation
pair,Identifier
",",Punctuation
 ,Whitespace
calculated,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
calculated,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Calculates the compatibility of a reader/writer schema pair.
     *
     * <p>
     * Relies on external memoization performed by {@link #getCompatibility(Schema, Schema)}.
     * </p>
     *
     * @param reader Reader schema to test.
     * @param writer Writer schema to test.
     * @return the compatibility of the reader/writer schema pair.
     */",Comment
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
calculateCompatibility,Identifier
(,Punctuation
"
",Newline
        ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
"
",Newline
    ,Whitespace
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
assert,Identifier
 ,Whitespace
(,Punctuation
reader,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
assert,Identifier
 ,Whitespace
(,Punctuation
writer,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
;,Punctuation
"
",Newline
"
",Newline
      ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
reader,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
switch,Keyword
 ,Whitespace
(,Punctuation
reader,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
NULL,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
BOOLEAN,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
INT,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
LONG,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
FLOAT,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
DOUBLE,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
BYTES,Identifier
:,Operator
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
STRING,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
ARRAY,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
getCompatibility,Identifier
(,Punctuation
reader,Identifier
.,Punctuation
getElementType,Identifier
(,Punctuation
),Punctuation
",",Punctuation
 ,Whitespace
writer,Identifier
.,Punctuation
getElementType,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
MAP,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
getCompatibility,Identifier
(,Punctuation
reader,Identifier
.,Punctuation
getValueType,Identifier
(,Punctuation
),Punctuation
",",Punctuation
 ,Whitespace
writer,Identifier
.,Punctuation
getValueType,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
FIXED,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
// fixed size and name must match:,Comment
"
",Newline
            ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
!,Operator
schemaNameEquals,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
reader,Identifier
.,Punctuation
getFixedSize,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
!=,Operator
 ,Whitespace
writer,Identifier
.,Punctuation
getFixedSize,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
ENUM,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
// enum names must match:,Comment
"
",Newline
            ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
!,Operator
schemaNameEquals,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
// reader symbols must contain all writer symbols:,Comment
"
",Newline
            ,Whitespace
final,Keyword
 ,Whitespace
Set,Identifier
<,Operator
String,Identifier
>,Operator
 ,Whitespace
symbols,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
new,Keyword
 ,Whitespace
HashSet,Identifier
<,Operator
String,Identifier
>,Operator
(,Punctuation
writer,Identifier
.,Punctuation
getEnumSymbols,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
            ,Whitespace
symbols,Identifier
.,Punctuation
removeAll,Identifier
(,Punctuation
reader,Identifier
.,Punctuation
getEnumSymbols,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
            ,Whitespace
// TODO: Report a human-readable error.,Comment
"
",Newline
            ,Whitespace
// if (!symbols.isEmpty()) {,Comment
"
",Newline
            ,Whitespace
// },Comment
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
symbols,Identifier
.,Punctuation
isEmpty,Identifier
(,Punctuation
),Punctuation
"
",Newline
                ,Whitespace
?,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
"
",Newline
                ,Whitespace
:,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
RECORD,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
// record names must match:,Comment
"
",Newline
            ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
!,Operator
schemaNameEquals,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
"
",Newline
            ,Whitespace
// Check that each field in the reader record can be populated from the writer record:,Comment
"
",Newline
            ,Whitespace
for,Keyword
 ,Whitespace
(,Punctuation
final,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
readerField,Identifier
 ,Whitespace
:,Operator
 ,Whitespace
reader,Identifier
.,Punctuation
getFields,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
final,Keyword
 ,Whitespace
Field,Identifier
 ,Whitespace
writerField,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
lookupWriterField,Identifier
(,Punctuation
writer,Identifier
",",Punctuation
 ,Whitespace
readerField,Identifier
),Punctuation
;,Punctuation
"
",Newline
              ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
writerField,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
                ,Whitespace
"// Reader field does not correspond to any field in the writer record schema,",Comment
"
",Newline
                ,Whitespace
// reader field must have a default value.,Comment
"
",Newline
                ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
readerField,Identifier
.,Punctuation
defaultValue,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
                  ,Whitespace
// reader field has no default value,Comment
"
",Newline
                  ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
                ,Whitespace
},Punctuation
"
",Newline
              ,Whitespace
},Punctuation
 ,Whitespace
else,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
                ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
getCompatibility,Identifier
(,Punctuation
readerField,Identifier
.,Punctuation
schema,Identifier
(,Punctuation
),Punctuation
",",Punctuation
 ,Whitespace
writerField,Identifier
.,Punctuation
schema,Identifier
(,Punctuation
),Punctuation
),Punctuation
"
",Newline
                    ,Whitespace
==,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
                  ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
                ,Whitespace
},Punctuation
"
",Newline
              ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
"
",Newline
            ,Whitespace
// All fields in the reader record can be populated from the writer record:,Comment
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
UNION,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
// Check that each individual branch of the writer union can be decoded:,Comment
"
",Newline
            ,Whitespace
for,Keyword
 ,Whitespace
(,Punctuation
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
writerBranch,Identifier
 ,Whitespace
:,Operator
 ,Whitespace
writer,Identifier
.,Punctuation
getTypes,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
getCompatibility,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writerBranch,Identifier
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
                ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
              ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
// Each schema in the writer union can be decoded with the reader:,Comment
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
"
",Newline
          ,Whitespace
default,Keyword
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
AvroRuntimeException,Identifier
(,Punctuation
"""Unknown schema type: """,String
 ,Whitespace
+,Operator
 ,Whitespace
reader,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
        ,Whitespace
},Punctuation
"
",Newline
"
",Newline
      ,Whitespace
},Punctuation
 ,Whitespace
else,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
// Reader and writer have different schema types:,Comment
"
",Newline
"
",Newline
        ,Whitespace
// Handle the corner case where writer is a union of a singleton branch: { X } === X,Comment
"
",Newline
        ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Schema,Identifier
.,Punctuation
Type,Identifier
.,Punctuation
UNION,Identifier
),Punctuation
"
",Newline
            ,Whitespace
&&,Operator
 ,Whitespace
writer,Identifier
.,Punctuation
getTypes,Identifier
(,Punctuation
),Punctuation
.,Punctuation
size,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
1,Literal
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
return,Keyword
 ,Whitespace
getCompatibility,Identifier
(,Punctuation
reader,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
.,Punctuation
getTypes,Identifier
(,Punctuation
),Punctuation
.,Punctuation
get,Identifier
(,Punctuation
0,Literal
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
        ,Whitespace
},Punctuation
"
",Newline
"
",Newline
        ,Whitespace
switch,Keyword
 ,Whitespace
(,Punctuation
reader,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
NULL,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
BOOLEAN,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
INT,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
LONG,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
INT,Identifier
),Punctuation
"
",Newline
                ,Whitespace
?,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
"
",Newline
                ,Whitespace
:,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
FLOAT,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
(,Punctuation
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
INT,Identifier
),Punctuation
"
",Newline
                ,Whitespace
||,Operator
 ,Whitespace
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
LONG,Identifier
),Punctuation
),Punctuation
"
",Newline
                ,Whitespace
?,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
"
",Newline
                ,Whitespace
:,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
DOUBLE,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
(,Punctuation
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
INT,Identifier
),Punctuation
"
",Newline
                ,Whitespace
||,Operator
 ,Whitespace
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
LONG,Identifier
),Punctuation
"
",Newline
                ,Whitespace
||,Operator
 ,Whitespace
(,Punctuation
writer,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
Type,Identifier
.,Punctuation
FLOAT,Identifier
),Punctuation
),Punctuation
"
",Newline
                ,Whitespace
?,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
"
",Newline
                ,Whitespace
:,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
BYTES,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
STRING,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
ARRAY,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
MAP,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
FIXED,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
ENUM,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
RECORD,Identifier
:,Operator
 ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
case,Keyword
 ,Whitespace
UNION,Identifier
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
for,Keyword
 ,Whitespace
(,Punctuation
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
readerBranch,Identifier
 ,Whitespace
:,Operator
 ,Whitespace
reader,Identifier
.,Punctuation
getTypes,Identifier
(,Punctuation
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
              ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
getCompatibility,Identifier
(,Punctuation
readerBranch,Identifier
",",Punctuation
 ,Whitespace
writer,Identifier
),Punctuation
 ,Whitespace
==,Operator
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
                ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
COMPATIBLE,Identifier
;,Punctuation
"
",Newline
              ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
},Punctuation
"
",Newline
            ,Whitespace
// No branch in the reader union has been found compatible with the writer schema:,Comment
"
",Newline
            ,Whitespace
return,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
.,Punctuation
INCOMPATIBLE,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
"
",Newline
          ,Whitespace
default,Keyword
:,Operator
 ,Whitespace
{,Punctuation
"
",Newline
            ,Whitespace
throw,Keyword
 ,Whitespace
new,Keyword
 ,Whitespace
AvroRuntimeException,Identifier
(,Punctuation
"""Unknown schema type: """,String
 ,Whitespace
+,Operator
 ,Whitespace
reader,Identifier
.,Punctuation
getType,Identifier
(,Punctuation
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
          ,Whitespace
},Punctuation
"
",Newline
        ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Identifies the type of a schema compatibility result.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
enum,Identifier
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
COMPATIBLE,Identifier
",",Punctuation
"
",Newline
    ,Whitespace
INCOMPATIBLE,Identifier
",",Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** Used internally to tag a reader/writer schema pair and prevent recursion. */,Comment
"
",Newline
    ,Whitespace
RECURSION_IN_PROGRESS,Identifier
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
// -----------------------------------------------------------------------------------------------,Comment
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Provides information about the compatibility of a single reader and writer schema pair.
   *
   * Note: This class represents a one-way relationship from the reader to the writer schema.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
/** The type of this result. */,Comment
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
mType,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** Validated reader schema. */,Comment
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
mReader,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** Validated writer schema. */,Comment
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
mWriter,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** Human readable description of this result. */,Comment
"
",Newline
    ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
mDescription,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Constructs a new instance.
     *
     * @param type of the schema compatibility.
     * @param reader schema that was validated.
     * @param writer schema that was validated.
     * @param description of this compatibility result.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
(,Punctuation
"
",Newline
        ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
type,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
Schema,Identifier
 ,Whitespace
reader,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
Schema,Identifier
 ,Whitespace
writer,Identifier
",",Punctuation
"
",Newline
        ,Whitespace
String,Identifier
 ,Whitespace
description,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
mType,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
type,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
mReader,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
reader,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
mWriter,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
writer,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
mDescription,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
description,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Gets the type of this result.
     *
     * @return the type of this result.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
SchemaCompatibilityType,Identifier
 ,Whitespace
getType,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mType,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Gets the reader schema that was validated.
     *
     * @return reader schema that was validated.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
getReader,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mReader,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Gets the writer schema that was validated.
     *
     * @return writer schema that was validated.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
Schema,Identifier
 ,Whitespace
getWriter,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mWriter,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Gets a human readable description of this validation result.
     *
     * @return a human readable description of this validation result.
     */",Comment
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
getDescription,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
mDescription,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
String,Identifier
 ,Whitespace
toString,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
String,Identifier
.,Punctuation
format,Identifier
(,Punctuation
"
",Newline
          ,Whitespace
"""SchemaPairCompatibility{type:%s, readerSchema:%s, writerSchema:%s, description:%s}""",String
",",Punctuation
"
",Newline
          ,Whitespace
mType,Identifier
",",Punctuation
 ,Whitespace
mReader,Identifier
",",Punctuation
 ,Whitespace
mWriter,Identifier
",",Punctuation
 ,Whitespace
mDescription,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
boolean,Keyword
 ,Whitespace
equals,Identifier
(,Punctuation
Object,Identifier
 ,Whitespace
other,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
(,Punctuation
null,Keyword
 ,Whitespace
!=,Operator
 ,Whitespace
other,Identifier
),Punctuation
 ,Whitespace
&&,Operator
 ,Whitespace
(,Punctuation
other,Identifier
 ,Whitespace
instanceof,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
),Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
final,Keyword
 ,Whitespace
SchemaPairCompatibility,Identifier
 ,Whitespace
result,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
(,Punctuation
SchemaPairCompatibility,Identifier
),Punctuation
 ,Whitespace
other,Identifier
;,Punctuation
"
",Newline
        ,Whitespace
return,Keyword
 ,Whitespace
objectsEqual,Identifier
(,Punctuation
result,Identifier
.,Punctuation
mType,Identifier
",",Punctuation
 ,Whitespace
mType,Identifier
),Punctuation
"
",Newline
            ,Whitespace
&&,Operator
 ,Whitespace
objectsEqual,Identifier
(,Punctuation
result,Identifier
.,Punctuation
mReader,Identifier
",",Punctuation
 ,Whitespace
mReader,Identifier
),Punctuation
"
",Newline
            ,Whitespace
&&,Operator
 ,Whitespace
objectsEqual,Identifier
(,Punctuation
result,Identifier
.,Punctuation
mWriter,Identifier
",",Punctuation
 ,Whitespace
mWriter,Identifier
),Punctuation
"
",Newline
            ,Whitespace
&&,Operator
 ,Whitespace
objectsEqual,Identifier
(,Punctuation
result,Identifier
.,Punctuation
mDescription,Identifier
",",Punctuation
 ,Whitespace
mDescription,Identifier
),Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
 ,Whitespace
else,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
return,Keyword
 ,Whitespace
false,Keyword
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
"
",Newline
    ,Whitespace
/** {@inheritDoc} */,Comment
"
",Newline
    ,Whitespace
@,Punctuation
Override,Identifier
"
",Newline
    ,Whitespace
public,Keyword
 ,Whitespace
int,Keyword
 ,Whitespace
hashCode,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
return,Keyword
 ,Whitespace
Arrays,Identifier
.,Punctuation
hashCode,Identifier
(,Punctuation
new,Keyword
 ,Whitespace
Object,Identifier
[,Punctuation
],Punctuation
{,Punctuation
mType,Identifier
",",Punctuation
 ,Whitespace
mReader,Identifier
",",Punctuation
 ,Whitespace
mWriter,Identifier
",",Punctuation
 ,Whitespace
mDescription,Identifier
},Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/** Borrowed from Guava's Objects.equal(a, b) */",Comment
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
static,Keyword
 ,Whitespace
boolean,Keyword
 ,Whitespace
objectsEqual,Identifier
(,Punctuation
Object,Identifier
 ,Whitespace
obj1,Identifier
",",Punctuation
 ,Whitespace
Object,Identifier
 ,Whitespace
obj2,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
return,Keyword
 ,Whitespace
(,Punctuation
obj1,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
obj2,Identifier
),Punctuation
 ,Whitespace
||,Operator
 ,Whitespace
(,Punctuation
(,Punctuation
obj1,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
null,Keyword
),Punctuation
 ,Whitespace
&&,Operator
 ,Whitespace
obj1,Identifier
.,Punctuation
equals,Identifier
(,Punctuation
obj2,Identifier
),Punctuation
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
},Punctuation
"
",Newline
