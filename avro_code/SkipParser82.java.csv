Text,Token
"/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */",Comment
"
",Newline
package,Keyword
 ,Whitespace
org,Identifier
.,Punctuation
apache,Identifier
.,Punctuation
avro,Identifier
.,Punctuation
io,Identifier
.,Punctuation
parsing,Identifier
;,Punctuation
"
",Newline
"
",Newline
import,Keyword
 ,Whitespace
java,Identifier
.,Punctuation
io,Identifier
.,Punctuation
IOException,Identifier
;,Punctuation
"
",Newline
"
",Newline
"/**
 * A parser that capable of skipping as well read and write. This class is
 * used by decoders who (unlink encoders) are required to implement
 * methods to skip.
 */",Comment
"
",Newline
public,Keyword
 ,Whitespace
class,Keyword
 ,Whitespace
SkipParser,Identifier
 ,Whitespace
extends,Keyword
 ,Whitespace
Parser,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
  ,Whitespace
"/**
   * The clients implement this interface to skip symbols and actions.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
interface,Keyword
 ,Whitespace
SkipHandler,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
"/**
     * Skips the action at the top of the stack.
     */",Comment
"
",Newline
    ,Whitespace
void,Keyword
 ,Whitespace
skipAction,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
;,Punctuation
"
",Newline
"
",Newline
    ,Whitespace
"/**
     * Skips the symbol at the top of the stack.
     */",Comment
"
",Newline
    ,Whitespace
void,Keyword
 ,Whitespace
skipTopSymbol,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
"
",Newline
  ,Whitespace
private,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
SkipHandler,Identifier
 ,Whitespace
skipHandler,Identifier
;,Punctuation
"
",Newline
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
SkipParser,Identifier
(,Punctuation
Symbol,Identifier
 ,Whitespace
root,Identifier
",",Punctuation
 ,Whitespace
ActionHandler,Identifier
 ,Whitespace
symbolHandler,Identifier
",",Punctuation
"
",Newline
      ,Whitespace
SkipHandler,Identifier
 ,Whitespace
skipHandler,Identifier
),Punctuation
"
",Newline
    ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
super,Keyword
(,Punctuation
root,Identifier
",",Punctuation
 ,Whitespace
symbolHandler,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
this,Keyword
.,Punctuation
skipHandler,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
skipHandler,Identifier
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Skips data by calling <code>skipXyz</code> or
   * <code>readXyz</code> methods on <code>this</code>, until the
   * parser stack reaches the target level.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
skipTo,Identifier
(,Punctuation
int,Keyword
 ,Whitespace
target,Identifier
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
outer,Identifier
:,Operator
"
",Newline
    ,Whitespace
while,Keyword
 ,Whitespace
(,Punctuation
target,Identifier
 ,Whitespace
<,Operator
 ,Whitespace
pos,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
      ,Whitespace
Symbol,Identifier
 ,Whitespace
top,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
stack,Identifier
[,Punctuation
pos,Identifier
 ,Whitespace
-,Operator
 ,Whitespace
1,Literal
],Punctuation
;,Punctuation
"
",Newline
      ,Whitespace
while,Keyword
 ,Whitespace
(,Punctuation
top,Identifier
.,Punctuation
kind,Identifier
 ,Whitespace
!=,Operator
 ,Whitespace
Symbol,Identifier
.,Punctuation
Kind,Identifier
.,Punctuation
TERMINAL,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
        ,Whitespace
if,Keyword
 ,Whitespace
(,Punctuation
top,Identifier
.,Punctuation
kind,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
Symbol,Identifier
.,Punctuation
Kind,Identifier
.,Punctuation
IMPLICIT_ACTION,Identifier
"
",Newline
            ,Whitespace
||,Operator
 ,Whitespace
top,Identifier
.,Punctuation
kind,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
Symbol,Identifier
.,Punctuation
Kind,Identifier
.,Punctuation
EXPLICIT_ACTION,Identifier
),Punctuation
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
skipHandler,Identifier
.,Punctuation
skipAction,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
        ,Whitespace
},Punctuation
 ,Whitespace
else,Keyword
 ,Whitespace
{,Punctuation
"
",Newline
          ,Whitespace
--,Operator
pos,Identifier
;,Punctuation
"
",Newline
          ,Whitespace
pushProduction,Identifier
(,Punctuation
top,Identifier
),Punctuation
;,Punctuation
"
",Newline
        ,Whitespace
},Punctuation
"
",Newline
        ,Whitespace
continue,Keyword
 ,Whitespace
outer,Identifier
;,Punctuation
"
",Newline
      ,Whitespace
},Punctuation
"
",Newline
      ,Whitespace
skipHandler,Identifier
.,Punctuation
skipTopSymbol,Identifier
(,Punctuation
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
},Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Skips the repeater at the top the stack.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
skipRepeater,Identifier
(,Punctuation
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
int,Keyword
 ,Whitespace
target,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
pos,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
Symbol,Identifier
 ,Whitespace
repeater,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
stack,Identifier
[,Punctuation
--,Operator
pos,Identifier
],Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
assert,Identifier
 ,Whitespace
repeater,Identifier
.,Punctuation
kind,Identifier
 ,Whitespace
==,Operator
 ,Whitespace
Symbol,Identifier
.,Punctuation
Kind,Identifier
.,Punctuation
REPEATER,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
pushProduction,Identifier
(,Punctuation
repeater,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
skipTo,Identifier
(,Punctuation
target,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
"
",Newline
  ,Whitespace
"/**
   * Pushes the given symbol on to the skip and skips it.
   * @param symToSkip The symbol that should be skipped.
   */",Comment
"
",Newline
  ,Whitespace
public,Keyword
 ,Whitespace
final,Keyword
 ,Whitespace
void,Keyword
 ,Whitespace
skipSymbol,Identifier
(,Punctuation
Symbol,Identifier
 ,Whitespace
symToSkip,Identifier
),Punctuation
 ,Whitespace
throws,Keyword
 ,Whitespace
IOException,Identifier
 ,Whitespace
{,Punctuation
"
",Newline
    ,Whitespace
int,Keyword
 ,Whitespace
target,Identifier
 ,Whitespace
=,Operator
 ,Whitespace
pos,Identifier
;,Punctuation
"
",Newline
    ,Whitespace
pushSymbol,Identifier
(,Punctuation
symToSkip,Identifier
),Punctuation
;,Punctuation
"
",Newline
    ,Whitespace
skipTo,Identifier
(,Punctuation
target,Identifier
),Punctuation
;,Punctuation
"
",Newline
  ,Whitespace
},Punctuation
"
",Newline
},Punctuation
"
",Newline
"
",Newline
